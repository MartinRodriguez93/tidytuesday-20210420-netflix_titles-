app = dash.Dash(external_stylesheets=[dbc.themes.JOURNAL])

# the style arguments for the sidebar. We use position:fixed and a fixed width
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": 0,
    "left": 0,
    "bottom": 0,
    "width": "21rem",
    "padding": "2rem 1rem",
    "background-color": "#f8f9fa",
}

# the styles for the main content position it to the right of the sidebar and
# add some padding.
CONTENT_STYLE = {
    "margin-left": "21rem",
    "margin-right": "2rem",
    "padding": "2rem 1rem",
}

sidebar=html.Div(
                [html.H2("#tidytuesday", className="display-4"),
                html.Hr(),
                dbc.CardImg(src='/assets/nf-logo.jpg',
                            style={'height':'10%',
                                   'width':'80%',
                                   "margin-left": "2rem"}
                           ),
                dbc.Nav([html.Br(),
                         dbc.DropdownMenu(label="Overview",
                                          children=[dbc.DropdownMenuItem("Scope",
                                                                         style={'backgroundColor': 'rgb(255,255,255)',
                                                                                'color':'black',
                                                                                'font-family': 'Arial Narrow',
                                                                                'font-weight':700},
                                                                         href="/",
                                                                         active="exact"),
                                                    dbc.DropdownMenuItem("Limitaciones",
                                                                         style={'backgroundColor': 'rgb(255,255,255)',
                                                                                'color':'black',
                                                                                'font-family': 'Arial Narrow',
                                                                                'font-weight':700},
                                                                         href="/page-1",
                                                                         active="exact"),
                                                   ],
                                          color="#eb6864",
                                          toggle_style={'border':'1px rgba(0,0,0,0.15) solid'},
                                          direction="right"
                                         ),
                         html.Br(),
                         dbc.DropdownMenu(label="Per country",
                                          children=[dbc.DropdownMenuItem("World",
                                                                         style={'backgroundColor': 'rgb(255,255,255)',
                                                                                'color':'black',
                                                                                'font-family': 'Arial Narrow',
                                                                                'font-weight':700},
                                                                         href="/page-2",
                                                                         active="exact")
                                                   ],
                                          color="#eb6864",
                                          toggle_style={'border':'1px rgba(0,0,0,0.15) solid'},
                                          direction="right"
                                         ),
                        ],
                        vertical=True,
                        pills=True
                       ),
               ],
               style=SIDEBAR_STYLE
               )

content = html.Div(id="page-content", style=CONTENT_STYLE)

app.layout = html.Div([dcc.Location(id="url"), sidebar, content])


@app.callback(Output("page-content", "children"), [Input("url", "pathname")])
def render_page_content(pathname):
    if pathname == "/":
        return html.Div(children=[html.H2("Netflix challenge: Scope", className="display-4"),
                                  html.Hr(),
                                  html.H5(children=[html.Li(['Data Analysis using Python based on the ',
                                                            html.Span('#tidytuesday challenge of 2021-04-21.',
                                                                      id="tooltip-target",
                                                                      style={'font-style': 'italic',
                                                                             "cursor": "pointer"},
                                                                     )
                                                            ],
                                                             style={'color':'black'}
                                                           ),
                                                     dbc.Tooltip(
                                                                 html.A("Github #tidytuesday",
                                                                         href='https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-20/readme.md',
                                                                         style={'color':'white'}, 
                                                                         target="_blank"),
                                                                         autohide=False,
                                                                         target="tooltip-target",
                                                                         style={'backgroundColor': 'rgb(0,0,0)'},
                                                                ),
                                                    html.Br(),
                                                    html.Li([html.Span('Datasets:',
                                                                       style={"textDecoration": "underline"},
                                                                      ),
                                                             html.Span([' netflix_titles.csv dataset and ',
                                                                        html.Span('IMDB datasets.',
                                                                                  id="tooltip-imdb",
                                                                                  style={'font-style': 'italic',
                                                                                         "cursor": "pointer"},
                                                                                 ),
                                                                       ],
                                                                      ),
                                                             dbc.Tooltip(
                                                                         html.A("IMDB datasets",
                                                                                 href='https://www.imdb.com/interfaces/',
                                                                                 style={'color':'black'}, 
                                                                                 target="_blank"),
                                                                                 autohide=False,
                                                                                 target="tooltip-imdb",
                                                                                 style={'backgroundColor': 'rgb(239,255,0)'},
                                                                        ),
                                                            ],
                                                           ),    
                                                    html.Br(),
                                                    html.Li([html.Span('Python libraries:',
                                                                       style={"textDecoration": "underline"},
                                                                      ),
                                                             html.Span(' pandas, json, plotly.express, matplotlib.pyplot, numpy, plotly.graph_objects and wordcloud.')
                                                            ],
                                                           ),
                                                    html.Br(),
                                                    html.Li(['Dash developed by ',
                                                            html.Span('Martín Ignacio Rodríguez',
                                                                      id="tooltip-ln",
                                                                      style={'font-style': 'italic',
                                                                             "cursor": "pointer"},
                                                                     )
                                                            ],
                                                             style={'color':'black'}
                                                           ),
                                                     dbc.Tooltip(
                                                                 html.A("Linkedin Profile",
                                                                         href='https://www.linkedin.com/in/martin-rodriguez-47796392/',
                                                                         style={'color':'white'}, 
                                                                         target="_blank"),
                                                                         autohide=False,
                                                                         target="tooltip-ln",
                                                                         style={'backgroundColor': 'rgb(85,85,255)'},
                                                               ),
                                                   ],
                                         ),
                                 ],
                       )
    elif pathname == "/page-1":
        return html.Div(children=[html.H2("Netflix challenge: Limitaciones", className="display-4"),
                                  html.Hr(),
                                  html.H5(children=[html.Li('El dataset original netflix_titles.csv contaba con 7787 registros. Fueron eliminados 2979 registros con valores nulos en las columnas director, cast, country, date_added y rating.'),
                                                    html.Br(),
                                                    html.Li('Para el análisis de duración de las movies/tv shows no se consideraron 135 casos cuya duración estaba expresada en temporadas en lugar de minutos.'),
                                                    html.Br(),
                                                    html.Li('De los 4808 registros usados para el analisis del dataset netflix_titles.csv sólo se pudieron mergear 1486 con los dataset de IMDB.')
                                                    ],
                                          ),
                                  ],
                       ),
    elif pathname == "/page-2":
        return html.Div(children=[html.H2("Netflix challenge: per country", className="display-4"),
                                  html.Hr(),
                                  html.Div(id='country',
                                           children='Choose a type: '),
                                  dcc.Dropdown(id='dropdown',
                                               options=[{'label':'Movie',
                                                         'value':'Movie'},
                                                        {'label':'TV Show',
                                                         'value':'TV Show'}
                                                       ],
                                               value='Movie',
                                               multi=False
                                             ),
                                  html.Br(),
                                  dcc.Graph(id='Grafico_1',
                                            figure=country_treemap)
                                ],
                       )    
    # If the user tries to reach a different page, return a 404 message
    return dbc.Jumbotron(
        [
            html.H1("404: Not found", className="text-danger"),
            html.Hr(),
            html.P(f"The pathname {pathname} was not recognised..."),
        ]
    )

#Callback filter per movie/tv show:
@app.callback(Output(component_id='country', component_property='children'),
                      Input(component_id='dropdown', component_property='value')
                     )
def update_output_dropdown(select_value):
    return 'Choose a type: '
    
#Callback graph
@app.callback(
    Output(component_id='Grafico_1',component_property='figure'),
    Input(component_id='dropdown',component_property='value')
)
def update_grafico(select_value):
  country_treemap=px.treemap(data_frame=df_shows_country[['movies_tvshows','country','Movie','TV Show']],
                             path=[px.Constant('Total '+ select_value + ' produced per country'),'country'],
                             values=select_value)
  country_treemap.data[0].textinfo = 'label+value+percent parent'
  country_treemap.layout.hovermode = False
  return country_treemap

# For Development only, otherwise use gunicorn or uwsgi to launch, e.g.
# gunicorn -b 0.0.0.0:8050 index:app.server
# https://community.plotly.com/t/production-and-development-enviroments/21348/2
# https://stackoverflow.com/questions/59587439/plotly-dash-application-not-running
# https://stackoverflow.com/questions/62378947/hot-reload-in-dash-does-not-automatically-update
# debug=True,
# use_reloader=False,
# threaded=True, 
if __name__ == '__main__':  
    app.run_server(port=8124, host='0.0.0.0')#8124,8125,8126,8050
